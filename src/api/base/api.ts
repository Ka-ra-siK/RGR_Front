/* eslint-disable */
/// <reference path="./custom.d.ts" />
// tslint:disable
// @ts-nocheck
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Clients
 */
export interface Clients {
    /**
     * 
     * @type {number}
     * @memberof Clients
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Clients
     */
    name?: string;
    /**
     * 
     * @type {Array&lt;OrderService&gt;}
     * @memberof Clients
     */
    order?: Array<OrderService>;
    /**
     * 
     * @type {string}
     * @memberof Clients
     */
    patronymic?: string;
    /**
     * 
     * @type {string}
     * @memberof Clients
     */
    phoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Clients
     */
    surname?: string;
}

/**
 * 
 * @export
 * @interface Masters
 */
export interface Masters {
    /**
     * 
     * @type {number}
     * @memberof Masters
     */
    id?: number;
    /**
     * 
     * @type {Array&lt;Materials&gt;}
     * @memberof Masters
     */
    materials?: Array<Materials>;
    /**
     * 
     * @type {Array&lt;Specialization&gt;}
     * @memberof Masters
     */
    specializations?: Array<Specialization>;
    /**
     * 
     * @type {Staff}
     * @memberof Masters
     */
    staffByStaffId?: Staff;
}

/**
 * 
 * @export
 * @interface Materials
 */
export interface Materials {
    /**
     * 
     * @type {number}
     * @memberof Materials
     */
    cost?: number;
    /**
     * 
     * @type {number}
     * @memberof Materials
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Materials
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Materials
     */
    unitMeasurement?: string;
}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ModelAndView
     */
    model?: any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndView.StatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @namespace ModelAndView
 */
export namespace ModelAndView {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _100CONTINUE = <any> '100 CONTINUE',
        _101SWITCHINGPROTOCOLS = <any> '101 SWITCHING_PROTOCOLS',
        _102PROCESSING = <any> '102 PROCESSING',
        _103CHECKPOINT = <any> '103 CHECKPOINT',
        _200OK = <any> '200 OK',
        _201CREATED = <any> '201 CREATED',
        _202ACCEPTED = <any> '202 ACCEPTED',
        _203NONAUTHORITATIVEINFORMATION = <any> '203 NON_AUTHORITATIVE_INFORMATION',
        _204NOCONTENT = <any> '204 NO_CONTENT',
        _205RESETCONTENT = <any> '205 RESET_CONTENT',
        _206PARTIALCONTENT = <any> '206 PARTIAL_CONTENT',
        _207MULTISTATUS = <any> '207 MULTI_STATUS',
        _208ALREADYREPORTED = <any> '208 ALREADY_REPORTED',
        _226IMUSED = <any> '226 IM_USED',
        _300MULTIPLECHOICES = <any> '300 MULTIPLE_CHOICES',
        _301MOVEDPERMANENTLY = <any> '301 MOVED_PERMANENTLY',
        _302FOUND = <any> '302 FOUND',
        _302MOVEDTEMPORARILY = <any> '302 MOVED_TEMPORARILY',
        _303SEEOTHER = <any> '303 SEE_OTHER',
        _304NOTMODIFIED = <any> '304 NOT_MODIFIED',
        _305USEPROXY = <any> '305 USE_PROXY',
        _307TEMPORARYREDIRECT = <any> '307 TEMPORARY_REDIRECT',
        _308PERMANENTREDIRECT = <any> '308 PERMANENT_REDIRECT',
        _400BADREQUEST = <any> '400 BAD_REQUEST',
        _401UNAUTHORIZED = <any> '401 UNAUTHORIZED',
        _402PAYMENTREQUIRED = <any> '402 PAYMENT_REQUIRED',
        _403FORBIDDEN = <any> '403 FORBIDDEN',
        _404NOTFOUND = <any> '404 NOT_FOUND',
        _405METHODNOTALLOWED = <any> '405 METHOD_NOT_ALLOWED',
        _406NOTACCEPTABLE = <any> '406 NOT_ACCEPTABLE',
        _407PROXYAUTHENTICATIONREQUIRED = <any> '407 PROXY_AUTHENTICATION_REQUIRED',
        _408REQUESTTIMEOUT = <any> '408 REQUEST_TIMEOUT',
        _409CONFLICT = <any> '409 CONFLICT',
        _410GONE = <any> '410 GONE',
        _411LENGTHREQUIRED = <any> '411 LENGTH_REQUIRED',
        _412PRECONDITIONFAILED = <any> '412 PRECONDITION_FAILED',
        _413PAYLOADTOOLARGE = <any> '413 PAYLOAD_TOO_LARGE',
        _413REQUESTENTITYTOOLARGE = <any> '413 REQUEST_ENTITY_TOO_LARGE',
        _414URITOOLONG = <any> '414 URI_TOO_LONG',
        _414REQUESTURITOOLONG = <any> '414 REQUEST_URI_TOO_LONG',
        _415UNSUPPORTEDMEDIATYPE = <any> '415 UNSUPPORTED_MEDIA_TYPE',
        _416REQUESTEDRANGENOTSATISFIABLE = <any> '416 REQUESTED_RANGE_NOT_SATISFIABLE',
        _417EXPECTATIONFAILED = <any> '417 EXPECTATION_FAILED',
        _418IAMATEAPOT = <any> '418 I_AM_A_TEAPOT',
        _419INSUFFICIENTSPACEONRESOURCE = <any> '419 INSUFFICIENT_SPACE_ON_RESOURCE',
        _420METHODFAILURE = <any> '420 METHOD_FAILURE',
        _421DESTINATIONLOCKED = <any> '421 DESTINATION_LOCKED',
        _422UNPROCESSABLEENTITY = <any> '422 UNPROCESSABLE_ENTITY',
        _423LOCKED = <any> '423 LOCKED',
        _424FAILEDDEPENDENCY = <any> '424 FAILED_DEPENDENCY',
        _425TOOEARLY = <any> '425 TOO_EARLY',
        _426UPGRADEREQUIRED = <any> '426 UPGRADE_REQUIRED',
        _428PRECONDITIONREQUIRED = <any> '428 PRECONDITION_REQUIRED',
        _429TOOMANYREQUESTS = <any> '429 TOO_MANY_REQUESTS',
        _431REQUESTHEADERFIELDSTOOLARGE = <any> '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
        _451UNAVAILABLEFORLEGALREASONS = <any> '451 UNAVAILABLE_FOR_LEGAL_REASONS',
        _500INTERNALSERVERERROR = <any> '500 INTERNAL_SERVER_ERROR',
        _501NOTIMPLEMENTED = <any> '501 NOT_IMPLEMENTED',
        _502BADGATEWAY = <any> '502 BAD_GATEWAY',
        _503SERVICEUNAVAILABLE = <any> '503 SERVICE_UNAVAILABLE',
        _504GATEWAYTIMEOUT = <any> '504 GATEWAY_TIMEOUT',
        _505HTTPVERSIONNOTSUPPORTED = <any> '505 HTTP_VERSION_NOT_SUPPORTED',
        _506VARIANTALSONEGOTIATES = <any> '506 VARIANT_ALSO_NEGOTIATES',
        _507INSUFFICIENTSTORAGE = <any> '507 INSUFFICIENT_STORAGE',
        _508LOOPDETECTED = <any> '508 LOOP_DETECTED',
        _509BANDWIDTHLIMITEXCEEDED = <any> '509 BANDWIDTH_LIMIT_EXCEEDED',
        _510NOTEXTENDED = <any> '510 NOT_EXTENDED',
        _511NETWORKAUTHENTICATIONREQUIRED = <any> '511 NETWORK_AUTHENTICATION_REQUIRED'
    }
}

/**
 * 
 * @export
 * @interface MovingInformation
 */
export interface MovingInformation {
    /**
     * 
     * @type {number}
     * @memberof MovingInformation
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MovingInformation
     */
    orderDate?: string;
    /**
     * 
     * @type {number}
     * @memberof MovingInformation
     */
    orderNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof MovingInformation
     */
    position?: string;
    /**
     * 
     * @type {string}
     * @memberof MovingInformation
     */
    transferReason?: string;
}

/**
 * 
 * @export
 * @interface OrderService
 */
export interface OrderService {
    /**
     * 
     * @type {number}
     * @memberof OrderService
     */
    id?: number;
    /**
     * 
     * @type {Masters}
     * @memberof OrderService
     */
    mastersByMasterId?: Masters;

    /**
     * 
     * @type {string}
     * @memberof OrderService
     */
    serviceName?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderService
     */
    servicePrice?: number;
}

/**
 * 
 * @export
 * @interface Specialization
 */
export interface Specialization {
    /**
     * 
     * @type {number}
     * @memberof Specialization
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Specialization
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface Staff
 */
export interface Staff {
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    birthDate?: string;
    /**
     * 
     * @type {number}
     * @memberof Staff
     */
    id?: number;
    /**
     * 
     * @type {MovingInformation}
     * @memberof Staff
     */
    movingInformation?: Array<MovingInformation>;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    patronymic?: string;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    position?: string;
    /**
     * 
     * @type {number}
     * @memberof Staff
     */
    salary?: number;
    /**
     * 
     * @type {string}
     * @memberof Staff
     */
    surname?: string;
}

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}


/**
 * BasicErrorControllerApi - fetch parameter creator
 * @export
 */
export const BasicErrorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingHEAD(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingOPTIONS(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPATCH(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingHEAD(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingOPTIONS(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPATCH(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingHEAD(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingOPTIONS(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPATCH(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * ClientsControllerApi - fetch parameter creator
 * @export
 */
export const ClientsControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a client
         * @param {Clients} client client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(client: Clients, options: any = {}): FetchArgs {
            // verify required parameter 'client' is not null or undefined
            if (client === null || client === undefined) {
                throw new RequiredError('client','Required parameter client was null or undefined when calling createUsingPOST.');
            }
            const localVarPath = `/client`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Clients" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(client || {}) : (client || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a client
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE.');
            }
            const localVarPath = `/client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a client
         * @param {Clients} client client
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT(client: Clients, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'client' is not null or undefined
            if (client === null || client === undefined) {
                throw new RequiredError('client','Required parameter client was null or undefined when calling editUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT.');
            }
            const localVarPath = `/client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Clients" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(client || {}) : (client || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClientsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/client`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientsControllerApi - functional programming interface
 * @export
 */
export const ClientsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a client
         * @param {Clients} client client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(client: Clients, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Clients> {
            const localVarFetchArgs = ClientsControllerApiFetchParamCreator(configuration).createUsingPOST(client, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a client
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClientsControllerApiFetchParamCreator(configuration).deleteUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a client
         * @param {Clients} client client
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT(client: Clients, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Clients> {
            const localVarFetchArgs = ClientsControllerApiFetchParamCreator(configuration).editUsingPUT(client, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClientsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Clients>> {
            const localVarFetchArgs = ClientsControllerApiFetchParamCreator(configuration).getAllClientsUsingGET(options);

            console.log(BASE_PATH)
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ClientsControllerApi - factory interface
 * @export
 */
export const ClientsControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a client
         * @param {Clients} client client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(client: Clients, options?: any) {
            return ClientsControllerApiFp(configuration).createUsingPOST(client, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a client
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: number, options?: any) {
            return ClientsControllerApiFp(configuration).deleteUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a client
         * @param {Clients} client client
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT(client: Clients, id: number, options?: any) {
            return ClientsControllerApiFp(configuration).editUsingPUT(client, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all clients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllClientsUsingGET(options?: any) {
            return ClientsControllerApiFp(configuration).getAllClientsUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * ClientsControllerApi - object-oriented interface
 * @export
 * @class ClientsControllerApi
 * @extends {BaseAPI}
 */
export class ClientsControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a client
     * @param {} client client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsControllerApi
     */
    public createUsingPOST(client: Clients, options?: any) {
        return ClientsControllerApiFp(this.configuration).createUsingPOST(client, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a client
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsControllerApi
     */
    public deleteUsingDELETE(id: number, options?: any) {
        return ClientsControllerApiFp(this.configuration).deleteUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a client
     * @param {} client client
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsControllerApi
     */
    public editUsingPUT(client: Clients, id: number, options?: any) {
        return ClientsControllerApiFp(this.configuration).editUsingPUT(client, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all clients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientsControllerApi
     */
    public getAllClientsUsingGET(options?: any) {
        return ClientsControllerApiFp(this.configuration).getAllClientsUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * MastersControllerApi - fetch parameter creator
 * @export
 */
export const MastersControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a master
         * @param {Masters} master master
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(master: Masters, options: any = {}): FetchArgs {
            // verify required parameter 'master' is not null or undefined
            if (master === null || master === undefined) {
                throw new RequiredError('master','Required parameter master was null or undefined when calling createUsingPOST1.');
            }
            const localVarPath = `/master`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Masters" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(master || {}) : (master || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a master
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE1.');
            }
            const localVarPath = `/master/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a master
         * @param {number} id id
         * @param {Masters} master master
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(id: number, master: Masters, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT1.');
            }
            // verify required parameter 'master' is not null or undefined
            if (master === null || master === undefined) {
                throw new RequiredError('master','Required parameter master was null or undefined when calling editUsingPUT1.');
            }
            const localVarPath = `/master/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Masters" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(master || {}) : (master || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all masters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMastersUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/master`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MastersControllerApi - functional programming interface
 * @export
 */
export const MastersControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a master
         * @param {Masters} master master
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(master: Masters, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Masters> {
            const localVarFetchArgs = MastersControllerApiFetchParamCreator(configuration).createUsingPOST1(master, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a master
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MastersControllerApiFetchParamCreator(configuration).deleteUsingDELETE1(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a master
         * @param {number} id id
         * @param {Masters} master master
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(id: number, master: Masters, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Masters> {
            const localVarFetchArgs = MastersControllerApiFetchParamCreator(configuration).editUsingPUT1(id, master, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all masters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMastersUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Masters>> {
            const localVarFetchArgs = MastersControllerApiFetchParamCreator(configuration).getAllMastersUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MastersControllerApi - factory interface
 * @export
 */
export const MastersControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a master
         * @param {Masters} master master
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(master: Masters, options?: any) {
            return MastersControllerApiFp(configuration).createUsingPOST1(master, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a master
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options?: any) {
            return MastersControllerApiFp(configuration).deleteUsingDELETE1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a master
         * @param {number} id id
         * @param {Masters} master master
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(id: number, master: Masters, options?: any) {
            return MastersControllerApiFp(configuration).editUsingPUT1(id, master, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all masters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMastersUsingGET(options?: any) {
            return MastersControllerApiFp(configuration).getAllMastersUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * MastersControllerApi - object-oriented interface
 * @export
 * @class MastersControllerApi
 * @extends {BaseAPI}
 */
export class MastersControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a master
     * @param {} master master
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastersControllerApi
     */
    public createUsingPOST1(master: Masters, options?: any) {
        return MastersControllerApiFp(this.configuration).createUsingPOST1(master, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a master
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastersControllerApi
     */
    public deleteUsingDELETE1(id: number, options?: any) {
        return MastersControllerApiFp(this.configuration).deleteUsingDELETE1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a master
     * @param {} id id
     * @param {} master master
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastersControllerApi
     */
    public editUsingPUT1(id: number, master: Masters, options?: any) {
        return MastersControllerApiFp(this.configuration).editUsingPUT1(id, master, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all masters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MastersControllerApi
     */
    public getAllMastersUsingGET(options?: any) {
        return MastersControllerApiFp(this.configuration).getAllMastersUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * MaterialsControllerApi - fetch parameter creator
 * @export
 */
export const MaterialsControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a material
         * @param {Materials} material material
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(material: Materials, options: any = {}): FetchArgs {
            // verify required parameter 'material' is not null or undefined
            if (material === null || material === undefined) {
                throw new RequiredError('material','Required parameter material was null or undefined when calling createUsingPOST2.');
            }
            const localVarPath = `/material`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Materials" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(material || {}) : (material || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a material
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE2.');
            }
            const localVarPath = `/material/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a material
         * @param {number} id id
         * @param {Materials} material material
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, material: Materials, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT2.');
            }
            // verify required parameter 'material' is not null or undefined
            if (material === null || material === undefined) {
                throw new RequiredError('material','Required parameter material was null or undefined when calling editUsingPUT2.');
            }
            const localVarPath = `/material/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Materials" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(material || {}) : (material || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all Materials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMaterialsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/material`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MaterialsControllerApi - functional programming interface
 * @export
 */
export const MaterialsControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a material
         * @param {Materials} material material
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(material: Materials, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Materials> {
            const localVarFetchArgs = MaterialsControllerApiFetchParamCreator(configuration).createUsingPOST2(material, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a material
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MaterialsControllerApiFetchParamCreator(configuration).deleteUsingDELETE2(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a material
         * @param {number} id id
         * @param {Materials} material material
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, material: Materials, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Materials> {
            const localVarFetchArgs = MaterialsControllerApiFetchParamCreator(configuration).editUsingPUT2(id, material, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all Materials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMaterialsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Materials>> {
            const localVarFetchArgs = MaterialsControllerApiFetchParamCreator(configuration).getAllMaterialsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MaterialsControllerApi - factory interface
 * @export
 */
export const MaterialsControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a material
         * @param {Materials} material material
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(material: Materials, options?: any) {
            return MaterialsControllerApiFp(configuration).createUsingPOST2(material, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a material
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options?: any) {
            return MaterialsControllerApiFp(configuration).deleteUsingDELETE2(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a material
         * @param {number} id id
         * @param {Materials} material material
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, material: Materials, options?: any) {
            return MaterialsControllerApiFp(configuration).editUsingPUT2(id, material, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all Materials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMaterialsUsingGET(options?: any) {
            return MaterialsControllerApiFp(configuration).getAllMaterialsUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * MaterialsControllerApi - object-oriented interface
 * @export
 * @class MaterialsControllerApi
 * @extends {BaseAPI}
 */
export class MaterialsControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a material
     * @param {} material material
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialsControllerApi
     */
    public createUsingPOST2(material: Materials, options?: any) {
        return MaterialsControllerApiFp(this.configuration).createUsingPOST2(material, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a material
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialsControllerApi
     */
    public deleteUsingDELETE2(id: number, options?: any) {
        return MaterialsControllerApiFp(this.configuration).deleteUsingDELETE2(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a material
     * @param {} id id
     * @param {} material material
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialsControllerApi
     */
    public editUsingPUT2(id: number, material: Materials, options?: any) {
        return MaterialsControllerApiFp(this.configuration).editUsingPUT2(id, material, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all Materials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaterialsControllerApi
     */
    public getAllMaterialsUsingGET(options?: any) {
        return MaterialsControllerApiFp(this.configuration).getAllMaterialsUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * MovingInformationControllerApi - fetch parameter creator
 * @export
 */
export const MovingInformationControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a movingInformation
         * @param {MovingInformation} movingInformation movingInformation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST3(movingInformation: MovingInformation, options: any = {}): FetchArgs {
            // verify required parameter 'movingInformation' is not null or undefined
            if (movingInformation === null || movingInformation === undefined) {
                throw new RequiredError('movingInformation','Required parameter movingInformation was null or undefined when calling createUsingPOST3.');
            }
            const localVarPath = `/moving_information`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MovingInformation" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(movingInformation || {}) : (movingInformation || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a movingInformation
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE3.');
            }
            const localVarPath = `/moving_information/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a movingInformation
         * @param {number} id id
         * @param {MovingInformation} movingInformation movingInformation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT3(id: number, movingInformation: MovingInformation, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT3.');
            }
            // verify required parameter 'movingInformation' is not null or undefined
            if (movingInformation === null || movingInformation === undefined) {
                throw new RequiredError('movingInformation','Required parameter movingInformation was null or undefined when calling editUsingPUT3.');
            }
            const localVarPath = `/moving_information/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MovingInformation" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(movingInformation || {}) : (movingInformation || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all movingInformations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllmovingInformationsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/moving_information`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MovingInformationControllerApi - functional programming interface
 * @export
 */
export const MovingInformationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a movingInformation
         * @param {MovingInformation} movingInformation movingInformation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST3(movingInformation: MovingInformation, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MovingInformation> {
            const localVarFetchArgs = MovingInformationControllerApiFetchParamCreator(configuration).createUsingPOST3(movingInformation, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a movingInformation
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = MovingInformationControllerApiFetchParamCreator(configuration).deleteUsingDELETE3(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a movingInformation
         * @param {number} id id
         * @param {MovingInformation} movingInformation movingInformation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT3(id: number, movingInformation: MovingInformation, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MovingInformation> {
            const localVarFetchArgs = MovingInformationControllerApiFetchParamCreator(configuration).editUsingPUT3(id, movingInformation, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all movingInformations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllmovingInformationsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<MovingInformation>> {
            const localVarFetchArgs = MovingInformationControllerApiFetchParamCreator(configuration).getAllmovingInformationsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MovingInformationControllerApi - factory interface
 * @export
 */
export const MovingInformationControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a movingInformation
         * @param {MovingInformation} movingInformation movingInformation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST3(movingInformation: MovingInformation, options?: any) {
            return MovingInformationControllerApiFp(configuration).createUsingPOST3(movingInformation, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a movingInformation
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: number, options?: any) {
            return MovingInformationControllerApiFp(configuration).deleteUsingDELETE3(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a movingInformation
         * @param {number} id id
         * @param {MovingInformation} movingInformation movingInformation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT3(id: number, movingInformation: MovingInformation, options?: any) {
            return MovingInformationControllerApiFp(configuration).editUsingPUT3(id, movingInformation, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all movingInformations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllmovingInformationsUsingGET(options?: any) {
            return MovingInformationControllerApiFp(configuration).getAllmovingInformationsUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * MovingInformationControllerApi - object-oriented interface
 * @export
 * @class MovingInformationControllerApi
 * @extends {BaseAPI}
 */
export class MovingInformationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a movingInformation
     * @param {} movingInformation movingInformation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovingInformationControllerApi
     */
    public createUsingPOST3(movingInformation: MovingInformation, options?: any) {
        return MovingInformationControllerApiFp(this.configuration).createUsingPOST3(movingInformation, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a movingInformation
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovingInformationControllerApi
     */
    public deleteUsingDELETE3(id: number, options?: any) {
        return MovingInformationControllerApiFp(this.configuration).deleteUsingDELETE3(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a movingInformation
     * @param {} id id
     * @param {} movingInformation movingInformation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovingInformationControllerApi
     */
    public editUsingPUT3(id: number, movingInformation: MovingInformation, options?: any) {
        return MovingInformationControllerApiFp(this.configuration).editUsingPUT3(id, movingInformation, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all movingInformations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MovingInformationControllerApi
     */
    public getAllmovingInformationsUsingGET(options?: any) {
        return MovingInformationControllerApiFp(this.configuration).getAllmovingInformationsUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * OrderServiceControllerApi - fetch parameter creator
 * @export
 */
export const OrderServiceControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a orderService
         * @param {OrderService} orderService OrderService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST4(orderService: OrderService, options: any = {}): FetchArgs {
            // verify required parameter 'orderService' is not null or undefined
            if (orderService === null || orderService === undefined) {
                throw new RequiredError('orderService','Required parameter orderService was null or undefined when calling createUsingPOST4.');
            }
            const localVarPath = `/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrderService" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(orderService || {}) : (orderService || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a OrderService
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE4.');
            }
            const localVarPath = `/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a orderService
         * @param {OrderService} orderService OrderService
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT4(orderService: OrderService, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'orderService' is not null or undefined
            if (orderService === null || orderService === undefined) {
                throw new RequiredError('orderService','Required parameter orderService was null or undefined when calling editUsingPUT4.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT4.');
            }
            const localVarPath = `/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrderService" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(orderService || {}) : (orderService || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all orderService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrderServicesUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/order`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderServiceControllerApi - functional programming interface
 * @export
 */
export const OrderServiceControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a orderService
         * @param {OrderService} orderService OrderService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST4(orderService: OrderService, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OrderService> {
            const localVarFetchArgs = OrderServiceControllerApiFetchParamCreator(configuration).createUsingPOST4(orderService, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a OrderService
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OrderServiceControllerApiFetchParamCreator(configuration).deleteUsingDELETE4(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a orderService
         * @param {OrderService} orderService OrderService
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT4(orderService: OrderService, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OrderService> {
            const localVarFetchArgs = OrderServiceControllerApiFetchParamCreator(configuration).editUsingPUT4(orderService, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all orderService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrderServicesUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<OrderService>> {
            const localVarFetchArgs = OrderServiceControllerApiFetchParamCreator(configuration).getAllOrderServicesUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OrderServiceControllerApi - factory interface
 * @export
 */
export const OrderServiceControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a orderService
         * @param {OrderService} orderService OrderService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST4(orderService: OrderService, options?: any) {
            return OrderServiceControllerApiFp(configuration).createUsingPOST4(orderService, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a OrderService
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(id: number, options?: any) {
            return OrderServiceControllerApiFp(configuration).deleteUsingDELETE4(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a orderService
         * @param {OrderService} orderService OrderService
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT4(orderService: OrderService, id: number, options?: any) {
            return OrderServiceControllerApiFp(configuration).editUsingPUT4(orderService, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all orderService
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrderServicesUsingGET(options?: any) {
            return OrderServiceControllerApiFp(configuration).getAllOrderServicesUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * OrderServiceControllerApi - object-oriented interface
 * @export
 * @class OrderServiceControllerApi
 * @extends {BaseAPI}
 */
export class OrderServiceControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a orderService
     * @param {} orderService OrderService
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceControllerApi
     */
    public createUsingPOST4(orderService: OrderService, options?: any) {
        return OrderServiceControllerApiFp(this.configuration).createUsingPOST4(orderService, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a OrderService
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceControllerApi
     */
    public deleteUsingDELETE4(id: number, options?: any) {
        return OrderServiceControllerApiFp(this.configuration).deleteUsingDELETE4(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a orderService
     * @param {} orderService OrderService
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceControllerApi
     */
    public editUsingPUT4(orderService: OrderService, id: number, options?: any) {
        return OrderServiceControllerApiFp(this.configuration).editUsingPUT4(orderService, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all orderService
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceControllerApi
     */
    public getAllOrderServicesUsingGET(options?: any) {
        return OrderServiceControllerApiFp(this.configuration).getAllOrderServicesUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * SpecializationControllerApi - fetch parameter creator
 * @export
 */
export const SpecializationControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a specialization
         * @param {Specialization} specialization specialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(specialization: Specialization, options: any = {}): FetchArgs {
            // verify required parameter 'specialization' is not null or undefined
            if (specialization === null || specialization === undefined) {
                throw new RequiredError('specialization','Required parameter specialization was null or undefined when calling createUsingPOST5.');
            }
            const localVarPath = `/specialization`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Specialization" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(specialization || {}) : (specialization || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specialization
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE5.');
            }
            const localVarPath = `/specialization/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a specialization
         * @param {number} id id
         * @param {Specialization} specialization specialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, specialization: Specialization, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT5.');
            }
            // verify required parameter 'specialization' is not null or undefined
            if (specialization === null || specialization === undefined) {
                throw new RequiredError('specialization','Required parameter specialization was null or undefined when calling editUsingPUT5.');
            }
            const localVarPath = `/specialization/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Specialization" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(specialization || {}) : (specialization || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all specialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllmovingInformationsUsingGET1(options: any = {}): FetchArgs {
            const localVarPath = `/specialization`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecializationControllerApi - functional programming interface
 * @export
 */
export const SpecializationControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a specialization
         * @param {Specialization} specialization specialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(specialization: Specialization, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Specialization> {
            const localVarFetchArgs = SpecializationControllerApiFetchParamCreator(configuration).createUsingPOST5(specialization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a specialization
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SpecializationControllerApiFetchParamCreator(configuration).deleteUsingDELETE5(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a specialization
         * @param {number} id id
         * @param {Specialization} specialization specialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, specialization: Specialization, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Specialization> {
            const localVarFetchArgs = SpecializationControllerApiFetchParamCreator(configuration).editUsingPUT5(id, specialization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all specialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllmovingInformationsUsingGET1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Specialization>> {
            const localVarFetchArgs = SpecializationControllerApiFetchParamCreator(configuration).getAllmovingInformationsUsingGET1(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SpecializationControllerApi - factory interface
 * @export
 */
export const SpecializationControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a specialization
         * @param {Specialization} specialization specialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(specialization: Specialization, options?: any) {
            return SpecializationControllerApiFp(configuration).createUsingPOST5(specialization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a specialization
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options?: any) {
            return SpecializationControllerApiFp(configuration).deleteUsingDELETE5(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a specialization
         * @param {number} id id
         * @param {Specialization} specialization specialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, specialization: Specialization, options?: any) {
            return SpecializationControllerApiFp(configuration).editUsingPUT5(id, specialization, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all specialization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllmovingInformationsUsingGET1(options?: any) {
            return SpecializationControllerApiFp(configuration).getAllmovingInformationsUsingGET1(options)(fetch, basePath);
        },
    };
};

/**
 * SpecializationControllerApi - object-oriented interface
 * @export
 * @class SpecializationControllerApi
 * @extends {BaseAPI}
 */
export class SpecializationControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a specialization
     * @param {} specialization specialization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationControllerApi
     */
    public createUsingPOST5(specialization: Specialization, options?: any) {
        return SpecializationControllerApiFp(this.configuration).createUsingPOST5(specialization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a specialization
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationControllerApi
     */
    public deleteUsingDELETE5(id: number, options?: any) {
        return SpecializationControllerApiFp(this.configuration).deleteUsingDELETE5(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a specialization
     * @param {} id id
     * @param {} specialization specialization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationControllerApi
     */
    public editUsingPUT5(id: number, specialization: Specialization, options?: any) {
        return SpecializationControllerApiFp(this.configuration).editUsingPUT5(id, specialization, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all specialization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecializationControllerApi
     */
    public getAllmovingInformationsUsingGET1(options?: any) {
        return SpecializationControllerApiFp(this.configuration).getAllmovingInformationsUsingGET1(options)(this.fetch, this.basePath);
    }

}

/**
 * StaffControllerApi - fetch parameter creator
 * @export
 */
export const StaffControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a staff
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST6(staff: Staff, options: any = {}): FetchArgs {
            // verify required parameter 'staff' is not null or undefined
            if (staff === null || staff === undefined) {
                throw new RequiredError('staff','Required parameter staff was null or undefined when calling createUsingPOST6.');
            }
            const localVarPath = `/staff`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Staff" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(staff || {}) : (staff || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a staff
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE6(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE6.');
            }
            const localVarPath = `/staff/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a staff
         * @param {number} id id
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT6(id: number, staff: Staff, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT6.');
            }
            // verify required parameter 'staff' is not null or undefined
            if (staff === null || staff === undefined) {
                throw new RequiredError('staff','Required parameter staff was null or undefined when calling editUsingPUT6.');
            }
            const localVarPath = `/staff/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Staff" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(staff || {}) : (staff || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllmovingInformationsUsingGET2(options: any = {}): FetchArgs {
            const localVarPath = `/staff`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffControllerApi - functional programming interface
 * @export
 */
export const StaffControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a staff
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST6(staff: Staff, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Staff> {
            const localVarFetchArgs = StaffControllerApiFetchParamCreator(configuration).createUsingPOST6(staff, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a staff
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE6(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StaffControllerApiFetchParamCreator(configuration).deleteUsingDELETE6(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a staff
         * @param {number} id id
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT6(id: number, staff: Staff, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Staff> {
            const localVarFetchArgs = StaffControllerApiFetchParamCreator(configuration).editUsingPUT6(id, staff, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllmovingInformationsUsingGET2(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Staff>> {
            const localVarFetchArgs = StaffControllerApiFetchParamCreator(configuration).getAllmovingInformationsUsingGET2(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StaffControllerApi - factory interface
 * @export
 */
export const StaffControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a staff
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST6(staff: Staff, options?: any) {
            return StaffControllerApiFp(configuration).createUsingPOST6(staff, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a staff
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE6(id: number, options?: any) {
            return StaffControllerApiFp(configuration).deleteUsingDELETE6(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a staff
         * @param {number} id id
         * @param {Staff} staff staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT6(id: number, staff: Staff, options?: any) {
            return StaffControllerApiFp(configuration).editUsingPUT6(id, staff, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all staff
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllmovingInformationsUsingGET2(options?: any) {
            return StaffControllerApiFp(configuration).getAllmovingInformationsUsingGET2(options)(fetch, basePath);
        },
    };
};

/**
 * StaffControllerApi - object-oriented interface
 * @export
 * @class StaffControllerApi
 * @extends {BaseAPI}
 */
export class StaffControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a staff
     * @param {} staff staff
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public createUsingPOST6(staff: Staff, options?: any) {
        return StaffControllerApiFp(this.configuration).createUsingPOST6(staff, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a staff
     * @param {} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public deleteUsingDELETE6(id: number, options?: any) {
        return StaffControllerApiFp(this.configuration).deleteUsingDELETE6(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a staff
     * @param {} id id
     * @param {} staff staff
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public editUsingPUT6(id: number, staff: Staff, options?: any) {
        return StaffControllerApiFp(this.configuration).editUsingPUT6(id, staff, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all staff
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public getAllmovingInformationsUsingGET2(options?: any) {
        return StaffControllerApiFp(this.configuration).getAllmovingInformationsUsingGET2(options)(this.fetch, this.basePath);
    }

}

